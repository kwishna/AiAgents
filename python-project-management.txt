# This file is only for notes while learning python project managements.

$ curl https://pyenv.run | bash     ## This will install pyenv along with a few plugins that are useful:

Or,

$ brew install pyenv
$ brew install pyenv-virtualenv

    pyenv: The actual pyenv application
    pyenv-virtualenv: Plugin for pyenv and virtual environments
    pyenv-update: Plugin for updating pyenv
    pyenv-doctor: Plugin to verify that pyenv and build dependencies are installed
    pyenv-which-ext: Plugin to automatically lookup system commands

WARNING: seems you still have not added 'pyenv' to the load path.

## Load pyenv automatically by adding the following to ~/.zshrc:

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

------------------------------------------------------------

## The above shows all the Python versions that pyenv knows about
$ pyenv install --list

------------------------------------------------------------

## You can install it with a single command.
$ pyenv install -v 3.14-dev # verbose

Or,

$ pyenv install 3.14-dev

------------------------------------------------------------

## Uninstall
$ pyenv uninstall 2.7.15
$ rm -rf ~/.pyenv/versions/2.7.15

------------------------------------------------------------

## Install location
$ ls ~/.pyenv/versions/

------------------------------------------------------------

## Show current installed python versions
$ pyenv versions    # * system (set by /home/realpython/.pyenv/version)

------------------------------------------------------------

## Show current set version
$ pyenv version

------------------------------------------------------------

## Actual path
$ pyenv which python    # /usr/bin/python

------------------------------------------------------------

## Set current global version

$ pyenv global 3.8-dev  # This command sets the ~/.pyenv/version to 3.8-dev.
$ pyenv global system   # Setting global version back to system default.

------------------------------------------------------------

## Set current local version
$ pyenv local 3.8-dev    # .python-version
$ echo $PYENV_VERSION

------------------------------------------------------------

## Set shell-specific version
$ pyenv shell 3.8-dev   # It sets the $PYENV_VERSION environment variable

------------------------------------------------------------

## Exploring pyenv Commands
$ pyenv commands

------------------------------------------------------------

## Get pyenv path
$ pyenv which pip       # /home/realpython/.pyenv/versions/3.6.8/bin/pip

==========================================================================================

# Virtual Environments and pyenv
pyenv has a wonderful plugin called pyenv-virtualenv that makes working with multiple Python version and multiple virtual environments a breeze.

## Creating a virtual environments.
$ pyenv virtualenv <python_version> <environment_name>

------------------------------------------------------------

## Activating virtual environments,
$ pyenv local myproject     

This creates a .python-version file in your current working directory and because you ran eval "$(pyenv virtualenv-init -)" in your environment,
the environment will automatically be activated.

## Manual Activation (if the above fails)
$ pyenv activate <environment_name>
$ pyenv deactivate

## Remove virtual environment
$ pyenv-virtualenv delete <environment_name>

=============================================================================================
# Pipenv

## Create virtual environment or use existing one.
$ pipenv shell

## Install dependencies
$ pipenv install    # You’ll notice that two files get created, a Pipfile and Pipfile.lock.

## Providing the --dev argument will put the dependency in a special [dev-packages] location in the Pipfile.
## These development packages only get installed if you specify the --dev argument with pipenv install.
$ pipenv install pytest --dev

## This will create/update your Pipfile.lock.
$ pipenv lock

## This tells Pipenv to ignore the Pipfile for installation and use what’s in the Pipfile.lock.
$ pipenv install --ignore-pipfile

## This installs all the dependencies needed for development,
$ pipenv install --dev

## Remove package.
$ pipenv uninstall <package_name>

## Remove all packages.
$ pipenv uninstall --all

## This command will print out a tree-like structure showing your dependencies.
$ pipenv graph

## This reversed tree may be more useful when you are trying to figure out conflicting sub-dependencies.
$ pipenv graph --reverse

## Virtual environment name.
$ pipenv --venv

## How to find out where your project home is:
$ pipenv --where


==========================================================================================================
# UV - https://docs.astral.sh/uv/

## On macOS and Linux.
$ curl -LsSf https://astral.sh/uv/install.sh | sh

## uv can update itself to the latest version:
$ uv self update

## Installing and managing Python itself.

    uv python install: Install Python versions.
    uv python list: View available Python versions.
    uv python find: Find an installed Python version.
    uv python pin: Pin the current project to use a specific Python version.
    uv python uninstall: Uninstall a Python version.

## Executing standalone Python scripts, e.g., example.py.

    uv run: Run a script.
    uv add --script: Add a dependency to a script
    uv remove --script: Remove a dependency from a script

## Creating and working on Python projects, i.e., with a pyproject.toml.

    uv init: Create a new Python project.
    uv add: Add a dependency to the project.
    uv remove: Remove a dependency from the project.
    uv sync: Sync the project's dependencies with the environment.
    uv lock: Create a lockfile for the project's dependencies.
    uv run: Run a command in the project environment.
    uv tree: View the dependency tree for the project.
    uv build: Build the project into distribution archives.
    uv publish: Publish the project to a package index.

## Running and installing tools published to Python package indexes, e.g., ruff or black.

    uvx / uv tool run: Run a tool in a temporary environment.
    uv tool install: Install a tool user-wide.
    uv tool uninstall: Uninstall a tool.
    uv tool list: List installed tools.
    uv tool update-shell: Update the shell to include tool executables.

## Manually managing environments and packages — intended to be used in legacy workflows or
   cases where the high-level commands do not provide enough control.

## Creating virtual environments (replacing venv and virtualenv):

    uv venv: Create a new virtual environment.

## Managing packages in an environment (replacing pip and pipdeptree):

    uv pip install: Install packages into the current environment.
    uv pip show: Show details about an installed package.
    uv pip freeze: List installed packages and their versions.
    uv pip check: Check that the current environment has compatible packages.
    uv pip list: List installed packages.
    uv pip uninstall: Uninstall packages.
    uv pip tree: View the dependency tree for the environment.

## Locking packages in an environment (replacing pip-tools):

    uv pip compile: Compile requirements into a lockfile.
    uv pip sync: Sync an environment with a lockfile.

## Managing and inspecting uv's state, such as the cache, storage directories, or performing a self-update:

    uv cache clean: Remove cache entries.
    uv cache prune: Remove outdated cache entries.
    uv cache dir: Show the uv cache directory path.
    uv tool dir: Show the uv tool directory path.
    uv python dir: Show the uv installed Python versions path.
    uv self update: Update uv to the latest version.

==============================================================================================================
# Poetry - https://python-poetry.org/docs

## Install
$ curl -sSL https://install.python-poetry.org | python3 -


